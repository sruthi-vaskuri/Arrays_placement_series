class Solution {
    public int[][] merge(int[][] intervals) {
        Arrays.sort(intervals,new Comparator<>(){
            public int compare(int[] o1,int[] o2){
                if(o1[0]!=o2[0])
                    return o1[0]-o2[0];
                return o1[1]-o2[1];
            }
        });
        ArrayList<ArrayList<Integer>> arr=new ArrayList<>();
        int minimum=intervals[0][0];
        int maximum=intervals[0][1];
        for(int i=1;i<intervals.length;i++){
            if(intervals[i][0]<=maximum){
                maximum=Math.max(intervals[i][1],maximum);
            }
            else{
                ArrayList<Integer> a=new ArrayList<>();
                a.add(minimum);
                a.add(maximum);
                arr.add(a);
                minimum=intervals[i][0];
                maximum=intervals[i][1];
            }
        }
                ArrayList<Integer> a=new ArrayList<>();
                a.add(minimum);
                a.add(maximum);
                arr.add(a);
        System.out.println(arr);
        int arr1[][]=new int[arr.size()][2];
        for(int i=0;i<arr.size();i++){
            arr1[i][0]=arr.get(i).get(0);
            arr1[i][1]=arr.get(i).get(1);
        }
        return arr1;
    }
}



LINK : https://leetcode.com/problems/merge-intervals/submissions/
